#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick-tap-ms = <200>; };

&mt { quick-tap-ms = <200>; };

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri-layer {
            if-layers = <LWR RSE>;
            then-layer = <ADJ>;
        };
    };

    combos {
        compatible = "zmk,combos";

        vimesc {
            bindings = <&kp ESC>;
            key-positions = <7 19>;
        };

        arrows {
            bindings = <&tog 4>;
            key-positions = <31 32 33>;
        };

        numbers {
            bindings = <&tog 5>;
            key-positions = <18 19 20>;
        };

        clear {
            bindings = <&bt BT_CLR>;
            key-positions = <13 12 14 15 16 17>;
        };

        bootloader {
            bindings = <&bootloader>;
            key-positions = <0 12 24 38>;
        };

        blr {
            bindings = <&bootloader>;
            key-positions = <11 23 35 39>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "MAIN";
            bindings = <
&mt ESCAPE GRAVE      &kp Q    &kp W    &kp E             &kp R               &kp T             &kp Y              &kp U            &kp I          &kp O    &kp P     &kp BACKSPACE
&lt 2 TAB             &kp A    &kp S    &kp D             &kp F               &lt 5 G           &kp H              &kp J            &kp K          &kp L    &kp SEMI  &mt RIGHT_BRACKET LEFT_BRACKET
&mt LEFT_SHIFT MINUS  &lt 1 Z  &lt 2 X  &kp C             &kp V               &kp B             &kp N              &kp M            &kp COMMA      &kp DOT  &kp FSLH  &kp ENTER
                                        &mt LCTRL DELETE  &mt LEFT_GUI SPACE  &mt LEFT_ALT RET  &lt LWR BACKSPACE  &mt RSHFT SPACE  &lt RSE ENTER
            >;
        };

        lower_layer {
            display-name = "SYM";
            bindings = <
&mt LGUI F1  &kp F2        &kp F3        &kp F4    &kp F5    &kp F6     &kp F7     &kp F8    &kp F9    &kp F10   &kp F11   &kp F12
&trans       &kp EXCL      &kp AT        &kp HASH  &kp DLLR  &kp PRCNT  &kp CARET  &kp AMPS  &kp STAR  &kp LPAR  &kp RPAR  &trans
&trans       &kp NUMBER_1  &kp NUMBER_2  &kp N3    &kp N4    &kp N5     &kp N6     &kp N7    &kp N8    &kp N9    &kp N0    &kp NON_US_BACKSLASH
                                         &trans    &trans    &trans     &trans     &trans    &trans
            >;
        };

        raise_layer {
            display-name = "NUM";
            bindings = <
&mt LGUI KP_NUM  &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &kp LG(NUMBER_4)  &kp LG(N5)   &kp C_VOL_UP  &kp HOME  &kp PSCRN  &kp PG_UP  &kp SLCK         &kp CLCK
&trans           &kp KP_MULTIPLY   &kp KP_N4         &kp KP_N5         &kp KP_N6         &kp KP_PLUS  &kp C_MUTE    &kp LEFT  &kp UP     &kp RIGHT  &kp INS          &trans
&trans           &trans            &trans            &kp KP_N2         &kp KP_N3         &kp KP_DOT   &kp C_VOL_DN  &kp END   &kp DOWN   &kp PG_DN  &kp PAUSE_BREAK  &trans
                                                     &trans            &trans            &trans       &trans        &trans    &trans
            >;
        };

        adjust_layer {
            display-name = "ADJ";
            bindings = <
&bootloader  &studio_unlock  &none         &none         &none         &none         &none         &none         &none         &none         &studio_unlock  &bootloader
&bt BT_CLR   &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0    &bt BT_CLR
&sys_reset   &none           &none         &none         &none         &none         &none         &none         &none         &none         &none           &sys_reset
                                           &trans        &none         &trans        &none         &trans        &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans    &kp UP    &trans     &trans  &trans  &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP  &kp END    &trans  &trans
&trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP       &kp RIGHT  &trans  &trans
&trans  &trans    &trans    &trans     &trans  &trans  &kp INSERT      &kp LEFT        &kp DOWN     &kp RIGHT  &trans  &trans
                            &trans     &trans  &trans  &trans          &trans          &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &kp N7        &kp N8        &kp N9        &kp SLASH  &kp ASTERISK      &mt MINUS MINUS
&trans  &trans  &trans  &trans  &trans  &trans  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PLUS   &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&trans  &trans  &trans  &trans  &trans  &trans  &kp N1        &kp NUMBER_2  &kp NUMBER_3  &kp ENTER  &kp LESS_THAN     &kp GREATER_THAN
                        &trans  &trans  &trans  &kp N0        &trans        &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_7 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_8 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
